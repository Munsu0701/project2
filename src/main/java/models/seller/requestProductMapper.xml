<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="RequestProductMap">
	<resultMap type="models.seller.ProductDto" id="productmap">
		<result column="abnum" property="abnum"/>
		<result column="seller" property="seller" />
		<result column="serialnum" property="serialnum"/>
		<result column="name" property="name"/>
		<result column="price" property="price"/>
		<result column="kategorie" property="kategorie"/>
		<result column="publisher" property="publisher"/>
		<result column="img" property="img"/>
		<result column="status" property="status"/>
		<result column="regDt" property="regDt"/>
		<result column="modDt" property="modDt"/>
	</resultMap>
	
<!-- 판매물품 승인요청 seller(UserId)-->
<insert id="register"  parameterType="models.seller.ProductDto" useGeneratedKeys="true"
        keyProperty="abnum" keyColumn="abnum">
	INSERT RequestProduct ( serialnum,seller, name,writer, price, kategorie, publisher, img) 
		VALUES (#{serialnum},#{seller},#{name},#{writer},#{price},#{kategorie},#{publisher},#{img})
</insert>



<!--
	seller : 신청자(Userid) , status : 상태값(요청중(req),승인(ture),거부(false)) 조건으로 모든 상품 가져옴   
	@author 5563a
 -->
<select id="getlist" parameterType="models.seller.ProductDto" resultMap="productmap">
	SELECT * FROM RequestProduct WHERE seller=#{seller} AND status=#{status};
</select>

<!--
	getlist + 페이지네이션
	seller : 신청자(Userid) , status : 상태값(요청중(req),승인(ture),거부(false)) 조건으로 모든 상품 가져옴   
	@author 5563a
 -->
<select id="getlistPage" parameterType="models.seller.ProductListDto" resultMap="productmap">
	SELECT * FROM RequestProduct WHERE seller=#{seller} AND status=#{status} limit ${offset},${limit};
</select>

<!--
	getlist + 페이지네이션 : 개수 가져오기
	seller : 신청자(Userid) , status : 상태값(요청중(req),승인(ture),거부(false)) 조건으로 모든 상품 가져옴   
	@author 5563a
 -->
<select id="getlistPageCount" parameterType="models.seller.ProductListDto" resultType="int">
	SELECT COUNT(*) FROM RequestProduct WHERE seller=#{seller} AND status=#{status};
</select>

<!-- seller : 신청자(Userid) , status : 상태값(요청중(req),승인(ture),거부(false)) 조건으로 상품 갯수 가져옴 -->
<select id="getlistCount" resultType="int">
	SELECT COUNT(*) FROM RequestProduct WHERE seller=#{seller} AND status=#{status};
</select>

<!-- 상품 abnum 값으로 데이터 불러오기 -->
<select id="get" parameterType="models.seller.ProductDto" resultMap="productmap">
	SELECT * FROM RequestProduct WHERE abnum=#{abnum};
</select>

<!-- 관리자 미승인 상품 목록 검색 -->
<select id="searchReq" parameterType="models.seller.ProductListDto" resultMap="productmap">
	SELECT * FROM RequestProduct
	<where>
		<if test="seller != null">AND seller LIKE #{seller}</if>
		<if test="name != null">AND name LIKE #{name}</if>
		<if test="kategorie != null">AND kategorie LIKE #{kategorie}</if>
		<if test="writer != null">AND writer LIKE #{writer}</if>
		<if test="publisher != null">AND publisher LIKE #{publisher}</if>
		AND status="req"
	</where>
	ORDER BY abnum DESC LIMIT #{offset}, #{limit};
</select>

<!-- 관리자 미승인 상품 목록 총 개수 -->
<select id="countReq" parameterType="models.seller.ProductDto" resultType="int">
	SELECT COUNT(*) FROM RequestProduct
	<where>
		<if test="seller != null">AND seller LIKE #{seller}</if>
		<if test="name != null">AND name LIKE #{name}</if>
		<if test="kategorie != null">AND kategorie LIKE #{kategorie}</if>
		<if test="writer != null">AND writer LIKE #{writer}</if>
		<if test="publisher != null">AND publisher LIKE #{publisher}</if>
		AND status="req"
	</where>
</select>

<!-- 상품 status 상태 업데이트 -->
<update id="statusUp" parameterType="models.seller.ProductDto" >
	UPDATE RequestProduct
			SET
				status=#{status},
				modDt=NOW()
			WHERE abnum=#{abnum};
</update>

<!-- 상품 삭제  -->
<delete id="delete">
	DELETE FROM RequestProduct 
	<where>
	seller=#{seller}
	AND
	abnum=${abnum}
	</where>
</delete>

</mapper>